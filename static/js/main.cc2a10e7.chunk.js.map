{"version":3,"sources":["redux/threeSelector.js","redux/threeReducer.js","components/three/threeJS.js","redux/configReducer.js","redux/store.js","components/Header/Header.js","redux/configSelector.js","components/configBar/ConfigBar.js","App.js","serviceWorker.js","index.js","components/configBar/ConfigBar.module.css"],"names":["getBoxColor","state","three","boxColor","getActiveGeometry","activeGeometry","initialState","THREE","changeBoxColor","color","type","threeReducer","action","geometry","ThreeScene","scene","camera","width","height","renderer","antialias","props","material","cube","controls","OrbitControls","handleWindowResize","window","innerWidth","innerHeight","setSize","myDiv","parentElement","lastChild","setAttribute","aspect","updateProjectionMatrix","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","removeEventListener","dispose","renderScene","render","this","position","z","setClearColor","appendChild","domElement","add","addEventListener","removeChild","className","ref","mount","Component","connect","colors","geometrys","description","configReducer","reducers","combineReducers","config","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","Header","getColors","getGeometrys","ConfigBar","colorsDivs","map","c","onClick","styles","itemsDiv","style","backgroundColor","geometryDivs","changeActiveGeometry","itemsContainer","React","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cc2a10e7.chunk.js","sourcesContent":["export let getBoxColor = state => state.three.boxColor\r\nexport let getActiveGeometry = state => state.three.activeGeometry","import * as THREE from 'three';\r\n\r\nconst CHANGE_BOX_COLOR = './threeReducer/CHANGE_BOX_COLOR'\r\nconst CHANGE_ACTIVE_GEOMETRY = './threeReducer/CHANGE_ACTIVE_GEOMETRY'\r\n\r\nlet initialState = {\r\n    boxColor: '#f45612',\r\n    activeGeometry: new THREE.BoxGeometry(1, 1, 1)\r\n}\r\n\r\nconst threeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CHANGE_BOX_COLOR:\r\n            return {\r\n                ...state,\r\n                boxColor: action.color\r\n            }\r\n        case CHANGE_ACTIVE_GEOMETRY:\r\n            return {\r\n                ...state,\r\n                activeGeometry: action.geometry\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creators\r\nexport let changeBoxColor = color => ({ type: CHANGE_BOX_COLOR, color })\r\nexport let changeActiveGeometry = geometry => ({ type: CHANGE_ACTIVE_GEOMETRY, geometry })\r\n\r\nexport default threeReducer","import React, { Component } from 'react';\r\nimport * as THREE from 'three';\r\nimport { connect } from 'react-redux'\r\nimport { getBoxColor, getActiveGeometry } from '../../redux/threeSelector';\r\nimport { changeBoxColor } from '../../redux/threeReducer';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nclass ThreeScene extends Component {\r\n\r\n    // width = window.innerWidth\r\n    // height = window.innerHeight\r\n    scene = new THREE.Scene()\r\n    camera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 1000)\r\n    renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    geometry = this.props.activeGeometry\r\n    material = new THREE.MeshBasicMaterial({ color: this.props.boxColor })\r\n    cube = new THREE.Mesh(this.geometry, this.material)\r\n    controls = new OrbitControls(this.camera);\r\n\r\n    componentDidMount() {\r\n        this.camera.position.z = 4\r\n        this.renderer.setClearColor('#fffff3')\r\n        // this.renderer.setSize(this.width, this.height)\r\n        // this.render.domElement.className = 'contnet'\r\n        this.myDiv.appendChild(this.renderer.domElement)\r\n        this.scene.add(this.cube)\r\n        this.start()\r\n        window.addEventListener(\"resize\", this.handleWindowResize)\r\n        this.handleWindowResize()\r\n\r\n        window.three = THREE\r\n        window.cube = this.cube\r\n    }\r\n    componentDidUpdate() {\r\n        this.material.color = new THREE.Color(this.props.boxColor)\r\n        this.cube.geometry = this.props.activeGeometry\r\n    }\r\n    componentWillUnmount() {\r\n        this.stop()\r\n        this.myDiv.removeChild(this.renderer.domElement)\r\n    }\r\n    handleWindowResize = () => {\r\n        const width =  window.innerWidth *0.75\r\n        const height =   window.innerHeight\r\n        this.renderer.setSize(width, height)\r\n\r\n        this.myDiv.parentElement.lastChild.setAttribute(\"style\",`width:${window.innerWidth *0.25}px`)\r\n        \r\n        this.camera.aspect = width / height\r\n        this.camera.updateProjectionMatrix()\r\n    }\r\n    start = () => {\r\n        if (!this.frameId) {\r\n            this.frameId = requestAnimationFrame(this.animate)\r\n        }\r\n    }\r\n    stop = () => {\r\n        cancelAnimationFrame(this.frameId)\r\n        window.removeEventListener(\"resize\", this.handleWindowResize)\r\n        this.controls.dispose()\r\n    }\r\n    animate = () => {\r\n        // this.cube.rotation.x += 0.01\r\n        // this.cube.rotation.y += 0.01\r\n        // this.props.changeBoxColor('#ff0000')\r\n        this.renderScene()\r\n        this.frameId = window.requestAnimationFrame(this.animate)\r\n    }\r\n    renderScene = () => {\r\n        this.renderer.render(this.scene, this.camera)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"content\"\r\n                ref={(mount) => { this.myDiv = mount }} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n    boxColor: getBoxColor(state),\r\n    activeGeometry: getActiveGeometry(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    changeBoxColor\r\n})(ThreeScene)","import * as THREE from 'three';\r\n\r\n\r\nlet initialState={\r\n    colors:[\r\n        \"#ffff00\",\r\n        \"#fffff8\",\r\n        \"#f92560\",\r\n        \"#ff0000\",\r\n        \"#000000\",\r\n        \"#ffff99\"\r\n    ],\r\n    geometrys: [\r\n        {description : \"Cube\" , geometry : new THREE.BoxGeometry(1, 1, 1)},\r\n        {description : \"Sphere\" , geometry : new THREE.SphereGeometry(1, 15, 15)},\r\n        {description : \"Cone\" , geometry : new THREE.ConeGeometry(1, 2, 15, 15)},\r\n        {description : \"Ring\" , geometry : new THREE.RingGeometry(0.5,1,15,15)},\r\n        {description : \"Cylinder\" , geometry : new THREE.CylinderGeometry(1,1,2)},\r\n\r\n    ]\r\n}\r\n\r\nlet configReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        case 'C' :\r\n            return{\r\n                ...state,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default configReducer","import {combineReducers, createStore, compose, applyMiddleware} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport threeReducer from './threeReducer';\r\nimport configReducer from './configReducer';\r\n\r\nlet reducers =  combineReducers({\r\n    three : threeReducer,\r\n    config : configReducer\r\n})\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nconst store = createStore(reducers\r\n    ,composeEnhancers(\r\n    applyMiddleware(thunkMiddleware)\r\n  ))\r\n// let store = createStore(reducers)\r\n\r\nexport default store","import React from 'react'\r\n// import './Header.module.css'\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <header  className=\"header\">\r\n            <h1>Configurator</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","export let getColors = state => state.config.colors\r\nexport let getGeometrys = state => state.config.geometrys\r\n\r\n","import React from 'react'\r\nimport styles from './ConfigBar.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { getColors, getGeometrys } from '../../redux/configSelector'\r\nimport { changeBoxColor, changeActiveGeometry } from '../../redux/threeReducer'\r\n\r\nclass ConfigBar extends React.Component {\r\n\r\n    colorsDivs = this.props.colors.map(c =>\r\n        <div onClick={() => { this.props.changeBoxColor(c) }}\r\n            className={styles.itemsDiv}\r\n            style={{ backgroundColor: c }}>\r\n        </div>)\r\n\r\n    geometryDivs = this.props.geometrys.map(c =>\r\n        <div onClick={() => { this.props.changeActiveGeometry(c.geometry) }}\r\n            className={styles.itemsDiv}\r\n    >{c.description}\r\n        </div>)\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"configBar\">\r\n                <h2>ConfigBar</h2>\r\n                <div>\r\n                    <h2>Select Model</h2>\r\n                    <div className={styles.itemsContainer}>\r\n                        {this.geometryDivs}\r\n                    </div>\r\n                </div>\r\n                <hr/>\r\n                <div className={styles.itemsContainer}>\r\n                    {this.colorsDivs}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n    colors: getColors(state),\r\n    geometrys: getGeometrys(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    changeBoxColor,\r\n    changeActiveGeometry\r\n})(ConfigBar)","import React from 'react';\nimport './App.css';\nimport ThreeScene from './components/three/threeJS';\nimport store from './redux/store';\nimport {Provider} from 'react-redux'\nimport Header from './components/Header/Header';\nimport ConfigBar from './components/configBar/ConfigBar';\n\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <div className=\"appWrapper\">\n      <Header/>\n      <ThreeScene/>\n      <ConfigBar/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// let threeObj = new ThreeJS()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// animate();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"itemsContainer\":\"ConfigBar_itemsContainer__3kfy9\",\"itemsDiv\":\"ConfigBar_itemsDiv__3lvrK\"};"],"sourceRoot":""}