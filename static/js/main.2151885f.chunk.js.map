{"version":3,"sources":["components/configBar/ConfigBar.module.css","redux/threeSelector.js","redux/threeReducer.js","components/three/threeJS.js","redux/configReducer.js","redux/store.js","components/Header/Header.js","redux/configSelector.js","components/configBar/ConfigBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getBoxColor","state","three","boxColor","initialState","changeBoxColor","color","type","threeReducer","action","ThreeScene","stats","statsModule","scene","THREE","camera","width","height","renderer","antialias","geometry","material","props","cubes","controls","OrbitControls","handleWindowResize","window","innerWidth","innerHeight","setSize","myDiv","parentElement","lastChild","setAttribute","aspect","updateProjectionMatrix","start","frameId","requestAnimationFrame","animate","stop","cancelAnimationFrame","removeEventListener","dispose","begin","renderScene","end","render","this","showPanel","document","body","appendChild","dom","position","z","setClearColor","domElement","addEventListener","i","push","forEach","element","x","Math","random","y","add","rednerer","removeChild","className","ref","mount","Component","connect","colors","configReducer","reducers","combineReducers","config","store","createStore","Header","getColors","ConfigBar","colorsDivs","map","c","onClick","styles","colorsDiv","style","backgroundColor","colorsContainer","React","App","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2151885f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorsContainer\":\"ConfigBar_colorsContainer__3XMpy\",\"colorsDiv\":\"ConfigBar_colorsDiv__1s971\"};","export let getBoxColor = state => state.three.boxColor","const CHANGE_BOX_COLOR = './threeReducer/CHANGE_BOX_COLOR'\r\n\r\nlet initialState={\r\n    boxColor : '#433F81'\r\n}\r\n\r\nconst threeReducer = ( state = initialState , action) =>{\r\n    switch(action.type){\r\n        case CHANGE_BOX_COLOR :\r\n            return{\r\n                ...state,\r\n                boxColor : action.color\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Action Creators\r\nexport let changeBoxColor = color => ({type:CHANGE_BOX_COLOR , color})\r\n\r\nexport default threeReducer","import React, { Component } from 'react';\r\nimport * as THREE from 'three';\r\nimport { connect } from 'react-redux'\r\nimport { getBoxColor } from '../../redux/threeSelector';\r\nimport { changeBoxColor } from '../../redux/threeReducer';\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\nimport statsModule from 'stats.js'\r\n\r\nclass ThreeScene extends Component {\r\n\r\n    // width = window.innerWidth\r\n    // height = window.innerHeight\r\n    stats = new statsModule()\r\n    scene = new THREE.Scene()\r\n    camera = new THREE.PerspectiveCamera(75, this.width / this.height, 0.1, 1000)\r\n    renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    geometry = new THREE.BoxGeometry(1, 1, 1)\r\n    material = new THREE.MeshBasicMaterial({ color: this.props.boxColor })\r\n    cubes = []\r\n    controls = new OrbitControls(this.camera);\r\n\r\n    componentDidMount() {\r\n        this.stats.showPanel(0)\r\n        document.body.appendChild( this.stats.dom )\r\n        this.camera.position.z = 50\r\n        this.renderer.setClearColor('#fffff3')\r\n        // this.renderer.setSize(this.width, this.height)\r\n        // this.render.domElement.className = 'contnet'\r\n        this.myDiv.appendChild(this.renderer.domElement)\r\n        // this.scene.add(this.cube)\r\n        this.start()\r\n        window.addEventListener(\"resize\", this.handleWindowResize)\r\n        this.handleWindowResize()\r\n\r\n        for(let i = 0 ; i < 1000 ; i++){\r\n            this.cubes.push(new THREE.Mesh(this.geometry, this.material))\r\n        }\r\n        this.cubes.forEach(element => {\r\n            element.position.x = Math.random() * 50 - 25\r\n            element.position.y = Math.random() * 50 - 25\r\n            element.position.z = Math.random() * 50 - 25\r\n            this.scene.add(element)\r\n        });\r\n        window.three = THREE\r\n        window.rednerer = this.renderer\r\n    }\r\n    componentDidUpdate() {\r\n        this.material.color = new THREE.Color(this.props.boxColor)\r\n    }\r\n    componentWillUnmount() {\r\n        this.stop()\r\n        this.myDiv.removeChild(this.renderer.domElement)\r\n    }\r\n    handleWindowResize = () => {\r\n        const width =  window.innerWidth *0.75\r\n        const height =   window.innerHeight\r\n        this.renderer.setSize(width, height)\r\n\r\n        this.myDiv.parentElement.lastChild.setAttribute(\"style\",`width:${window.innerWidth *0.25}px`)\r\n        \r\n        this.camera.aspect = width / height\r\n        this.camera.updateProjectionMatrix()\r\n    }\r\n    start = () => {\r\n        if (!this.frameId) {\r\n            this.frameId = requestAnimationFrame(this.animate)\r\n        }\r\n    }\r\n    stop = () => {\r\n        cancelAnimationFrame(this.frameId)\r\n        window.removeEventListener(\"resize\", this.handleWindowResize)\r\n        this.controls.dispose()\r\n    }\r\n    animate = () => {\r\n        this.stats.begin()\r\n        // this.cube.rotation.x += 0.01\r\n        // this.cube.rotation.y += 0.01\r\n        // this.props.changeBoxColor('#ff0000')\r\n        this.renderScene()\r\n        this.stats.end()\r\n        this.frameId = window.requestAnimationFrame(this.animate)\r\n    }\r\n    renderScene = () => {\r\n        this.renderer.render(this.scene, this.camera)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"content\"\r\n                ref={(mount) => { this.myDiv = mount }} />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n    boxColor: getBoxColor(state)\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n    changeBoxColor\r\n})(ThreeScene)","\r\n\r\nlet initialState={\r\n    colors:[\r\n        \"#ffff00\",\r\n        \"#fffff8\",\r\n        \"#f92560\",\r\n        \"#ff0000\",\r\n        \"#000000\",\r\n        \"#ffff99\"\r\n    ]\r\n}\r\n\r\nlet configReducer = (state = initialState , action) => {\r\n    switch(action.type){\r\n        case 'C' :\r\n            return{\r\n                ...state,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default configReducer","import {combineReducers, createStore} from 'redux'\r\nimport threeReducer from './threeReducer';\r\nimport configReducer from './configReducer';\r\n\r\nlet reducers =  combineReducers({\r\n    three : threeReducer,\r\n    config : configReducer\r\n})\r\n\r\nlet store = createStore(reducers)\r\n\r\nexport default store","import React from 'react'\r\n// import './Header.module.css'\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <header  className=\"header\">\r\n            <h1>Configurator</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","export let getColors = state => state.config.colors\r\n","import React from 'react'\r\nimport styles from './ConfigBar.module.css'\r\nimport { connect } from 'react-redux'\r\nimport { getColors } from '../../redux/configSelector'\r\nimport {changeBoxColor} from '../../redux/threeReducer'\r\n\r\nclass ConfigBar extends React.Component {\r\n\r\n    colorsDivs = this.props.colors.map( c => \r\n    <div onClick={ ()=>{this.props.changeBoxColor(c)} } \r\n        className={styles.colorsDiv} \r\n        style={{ backgroundColor:c}}>\r\n        </div>)\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"configBar\">\r\n                <h2>ConfigBar</h2>\r\n                <div><h2>Select Model</h2></div>\r\n                <div className={styles.colorsContainer}>\r\n                    {this.colorsDivs}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = state => ({\r\n    colors : getColors(state)\r\n})\r\n\r\nexport default connect(mapStateToProps , {\r\n    changeBoxColor\r\n})(ConfigBar)","import React from 'react';\nimport './App.css';\nimport ThreeScene from './components/three/threeJS';\nimport store from './redux/store';\nimport {Provider} from 'react-redux'\nimport Header from './components/Header/Header';\nimport ConfigBar from './components/configBar/ConfigBar';\n\nfunction App() {\n\n  return (\n    <Provider store={store}>\n      <div className=\"appWrapper\">\n      <Header/>\n      <ThreeScene/>\n      <ConfigBar/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n// let threeObj = new ThreeJS()\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// animate();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}